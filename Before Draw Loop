//Say you have all of your points in this array called "track"
var track = [];


//On Khanacademy you need to translate by 200 for x and y to center the screen at (0,0)

translate(200, 200);

//Rotate Functions: only use X and Y when using mouse, but Z is useful when concerning spinning and other things


//how to rotate along the x axis.
var rotateX3D = function(theta) {
    var sin_t = sin(theta);
    var cos_t = cos(theta);
    
    for (var n = 0; n < track.length; n++) { //will go through every point in track array
        var node = track[n]; //node will be in the form [x, y, z]
        
        var y = node[1]; //y-value of node[n], because node[n] is an array of x, y, z, making y the element 1
        var z = node[2]; //z-value of node[n], because z is the element 2 in [x, y, z]
        
        track[n][1] = y * cos_t - z * sin_t; //y-value will become this... uses trig calculations
        track[n][2] = z * cos_t + y * sin_t; //z-value will become this... uses trig calculations
    }
    
    
};

//how to rotate along the y axis.
var rotateY3D = function(theta) {
    var sin_t = sin(theta);
    var cos_t = cos(theta);
    
    for (var n = 0; n < track.length; n++) { //will go through every point in track array
        var node = track[n]; //node will be in the form [x, y, z]
        
        var x = node[0]; //x-value of node[n], because node[n] is an array of x, y, z, making x the element 0
        var z = node[2]; //z-value of node[n], because z is the element 2 in [x, y, z]
        
        track[n][0] = x * cos_t - z * sin_t; //x-value will become this... uses trig calculations
        track[n][2] = z * cos_t + x * sin_t; //z-value will become this... uses trig calculations
    }
    
    
};

//how to rotate along the z axis.
var rotateZ3D = function(theta) {
    var sin_t = sin(theta);
    var cos_t = cos(theta);
    
    for (var n = 0; n < track.length; n++) { //will go through every point in track array
        var node = track[n]; //node will be in the form [x, y, z]
        
        var x = node[0]; //x-value of node[n], because node[n] is an array of x, y, z, making x the element 0
        var y = node[1]; //y-value of node[n], because z is the element 1 in [x, y, z]
        
        track[n][0] = x * cos_t - y * sin_t; //x-value will become this... uses trig calculations
        track[n][1] = y * cos_t + x * sin_t; //y-value will become this... uses trig calculations
    }
    
    
};






//if the mouse is dragged
var mouseDragged = function() {

        rotateY3D(mouseX - pmouseX); 
        rotateX3D(mouseY - pmouseY); 
        
        //mouseX - pmouseX is the difference in where your mouse was in the last fram and now. Both are pre-defined and updated constantly
     
};
